@keyframes fadeInOpacity {
    0% {
        opacity: 0;
   
    }
    100% {
        opacity: 1;
  
    }
}

.front-page-wrapper {
  position: relative;
  top: 15vh;
  text-align: left;
}

.trailsText {
  position: relative;
  width: 100%;
  height: 35vh;
  line-height: 80px;
  color: black;
  font-size: 40vh;
  /* font-weight: 800; */
  font-weight: lighter;
  letter-spacing: -0.05em;
  will-change: transform, opacity;
}

.trailsText > div {
  padding-right: 0.05em;
}

.font-page-button {
  text-decoration: none;
}

.container {
  display: flex;
  align-items: center;
  height: 100%;
  justify-content: center;
}

.slider {
  position: relative;
  top: 20vh;
  height: 10vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.slider-image {
  width: 70vh;
}

.slide {
  opacity: 0;
  transition-duration: 1s ease;
}

.slide.active {
  opacity: 1;
  transition-duration: 1s;
}


.front-page-container {
  position: relative;
  top: 50%;
  transform: translateY(50%);
}

.front-page-title{
  font-weight:lighter;
  font-size: 15vh;
  color: white;
}


.header-container {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: space-between;
  width: screen;
}

.header-list-wrapper {
  color: rgb(0, 0, 0);
  list-style: none;
  margin: 0;
  padding: 0;
  margin-bottom: 5vh;
}

.header-list-item {
  display: inline-block;
  margin-left: 2vh;
  margin-right: 2vh;
}

.header-list-item-active {
  display: inline-block;
  margin-left: 2vh;
  margin-right: 2vh;
  color: rgb(255, 0, 0);
}

.header-link {
  text-decoration: none;
  color: black;
}

.header-link-active {
  text-decoration: none;
  color: rgb(255, 0, 0);
}

.header-list-item-contact {
  display: inline-block;
}

.header-list {
  list-style: none;
}

.header-items-container {
  color: rgb(0, 0, 0);
  text-align: left;
}

.header-items {
  text-align: left;
  text-decoration: none;
  color: rgb(0, 0, 0);
}

.header-border {
  position: relative;
  bottom: 0.5vh;
  background-color: rgb(199, 199, 199);
  width: 44vh;
  padding: 0.05vh;
}

.header-h1 {
  font-weight: lighter;
  font-size: 7vh;
  text-align: left;
  color: black;
}

.header-h1::before {
  color: white;
  animation: animate 6s linear infinite;
}

.gallery-text-wrapper {
  width: 50%;
  margin: 0 auto;
}

.gallery-text-title {
  color: rgb(0, 0, 0);
  font-size: 6vh;
  font-weight:lighter;
  text-align: center;
}

.button-wrapper {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: center;
  margin-top: 5vh; 
  margin-bottom: 5vh;
}

.button-break {
  color: black;
  font-size: 3vh;
  font-weight: lighter;
  margin-left: 2.1vh;
  margin-right: 2.1vh;
}

.gallery-button {
  position: relative;
  top: 0.5vh;
  background-color: transparent;
  border: none;
  font-size: 1.7vh;
  font-weight: lighter;
  letter-spacing: 0.2vh;
  cursor: pointer;
  color: rgb(114, 114, 114);
}

.gallery-button-active {
  position: relative;
  top: 0.5vh;
  background-color: transparent;
  border: none;
  font-size: 1.7vh;
  font-weight: lighter;
  letter-spacing: 0.2vh;
  cursor: pointer;
  color: rgb(206, 0, 0);
}

.gallery-button:hover {
  transform: scale(1.05);
  color: black;
}


.artwork-wrapper {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  opacity: 1;
    animation-name: fadeInOpacity;
    animation-iteration-count: 1;
    animation-timing-function: ease-in;
    animation-duration: 2s;
  width: 75%;
  margin: 0 auto;
}

.artwork-wrapper :nth-child(1) {
  animation-delay: 10s;
}

.artwork-container {
  overflow: none;
  object-fit: cover;
  opacity: 1;
    animation-name: fadeInOpacity;
    animation-iteration-count: 1;
    animation-timing-function: ease-in;
    animation-duration: 2s;
}

.artwork-container:hover {
  transform: scale(1.03);
}

.artwork-button {
  background: transparent;
  border: none;
  cursor: pointer;
}

.modal {
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-picture {
  height: 90vh;
}

.artwork-modal {
  width: 100vh;
  height: 80vh;
  overflow: none;
}

.artwork {
  width: 20vh;
  height: 17.5vh;
  object-fit: cover;
  overflow: none;
  margin-bottom: 1vh;
}

.about-page {
position: relative;
bottom: 5vh;
margin-top: 15vh;
}

.about-flex-wrapper {
  display: flex;
  justify-content: center;
  width: screen;
}

.about-title-wrapper {
  margin-top: 10vh;
  margin-bottom: 7vh;
}

.about-text-title {
  color: rgb(0, 0, 0);
  font-size: 6vh;
  font-weight:lighter;
}

.about-text-gallery-wrapper {
  margin: 0 auto;
}

.about-text-container {
  position: relative;
  width: 30%;
  font-size: 1.5vh;
  letter-spacing: 0.2vh;
  text-align: left;
  margin-right: 10vh;
  top: 5em
}

.about-text {
  position: relative;
  bottom: 10vh;
  color: rgb(0, 0, 0);
  font-size: 2vh;
  font-weight:lighter;
}

.carousel-container {
  width: 30%;
  height: 50%;
  display: flex;
}

.carousel {
  width: 30%;
  
}

.carousel-image {

}

.image-one-center {
  align-items: center;
  justify-content: center;
  margin: 0;
  position: absolute;
  top: 50%;
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.image-two {
  height: 60vh;
  object-fit: cover;
  object-position: 20% 10%;
  overflow: hidden;
}

.image-bell {
  height: 60vh;
  object-position: 20% 10%;
  overflow: hidden;
}

.contact-text-wrapper {
  width: 50%;
  margin: 0 auto;
}

.contact-text-title {
  color: rgb(0, 0, 0);
  font-size: 6vh;
  font-weight:lighter;
  margin: 5vh;
}

.contact-image-container {
  width: 70%;
  margin: 0 auto;
}

.contact-image {  
width: 70%;
}  

.contact-p {
  font-weight:lighter;
}


/* Moblie repsonsive */

@media only screen and (max-width: 800px) {

  .about-text-container {
    width: 100%;
    text-align: center;
    margin: 0 auto;
  }

  .about-flex-wrapper {
    width: 100%;
  }

  .about-flex-wrapper {
  display: inline;
  justify-content: center;
  width: 100%;
  }

  .carousel-container {
    width: 100%;
    height: 100%;
    display: flex;
  }
  
  .carousel {
    width: 50%;  
  }

  

  /* Gallery */

  
  .button-break {
    color: black;
    font-size: 3vh;
    font-weight: lighter;
    margin-left: 2.1vh;
    margin-right: 2.1vh;
  }
  
  .gallery-button {
    margin-left: 2.1vh;
    margin-right: 2.1vh;
  }

  .artwork-wrapper {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    opacity: 1;
    animation-name: fadeInOpacity;
    animation-iteration-count: 1;
    animation-timing-function: ease-in;
    animation-duration: 2s;
    width: 100%;
    margin: 0 auto;
  }

  .gallery-text-wrapper {
    width: 50%;
    margin: 0 auto;
  }

  .gallery-text-title {
    color: rgb(0, 0, 0);
    font-size: 6vh;
    font-weight:lighter;
    text-align: center;
  }
  
  .header-border {
    opacity: 0%;
    background-color: rgb(199, 199, 199);
    width: 46vh;
    padding: 0.1vh;
  }
  
  .slider {
    /* position: relative;
    top: 20vh; */
    margin: 0 auto;
    width: 5vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .slider-image {
    width: 50vh;
  }
  
  .contact-p {
    position: relative;
    top: 50;
    margin: 0 auto;
    width: 60vh;
  }

  .contact-image-container {
    width: 70%;
    margin: 0 auto;
  }
  
  
}


import React from "react";
import { useState } from "react";

import Header from "./Header";
import Dogs from "./Dogs";
import People from "./People";
import Horses from "./Horses";
import National from "./National";
import Wild from "./Wild";
import Farm from "./Farm"
import Cats from "./Cats"
import Acrylics from "./Acrylics";
import Mural from "./Mural";



export default function Galley() {

  const [ national, setNational ] = useState(false);
  const [ dogs, setDogs ] = useState(true);
  const [ portrait, setPortrait ] = useState(false);
  const [ wildAnimals, setWildAnimals ] = useState(false);
  const [ horses, setHorses ] = useState(false);
  const [ farm, setFarm ] = useState(false)
  const [ cats, setCats] = useState(false);
  const [ acrylics, setAcrylics] = useState(false);
  const [ mural, setMural] = useState(false);

  const handleClick = (gallery) => {

    if (gallery === "dogs") {
      setDogs(true);
      setPortrait(false);
      setHorses(false);
      setNational(false);
      setWildAnimals(false);
      setFarm(false);
      setCats(false);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "portrait") {
      setDogs(false);
      setPortrait(true);
      setHorses(false);
      setNational(false);
      setWildAnimals(false);
      setFarm(false);
      setCats(false);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "horses") {
      setDogs(false);
      setPortrait(false);
      setHorses(true);
      setNational(false);
      setWildAnimals(false);
      setFarm(false);
      setCats(false);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "national") {
      setDogs(false);
      setPortrait(false);
      setHorses(false);
      setNational(true);
      setWildAnimals(false);
      setFarm(false);
      setCats(false);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "wild") {
      setDogs(false);
      setPortrait(false);
      setHorses(false);
      setNational(false);
      setWildAnimals(true);
      setFarm(false);
      setCats(false);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "farm") {
      setDogs(false);
      setPortrait(false);
      setHorses(false);
      setNational(false);
      setWildAnimals(false);
      setFarm(true);
      setCats(false);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "cats") {
      setDogs(false);
      setPortrait(false);
      setHorses(false);
      setNational(false);
      setWildAnimals(false);
      setFarm(false);
      setCats(true);
      setAcrylics(false);
      setMural(false);
    }

    if (gallery === "acrylics") {
      setDogs(false);
      setPortrait(false);
      setHorses(false);
      setNational(false);
      setWildAnimals(false);
      setFarm(false);
      setCats(false);
      setAcrylics(true);
      setMural(false);
    }

    if (gallery === "mural") {
      setDogs(false);
      setPortrait(false);
      setHorses(false);
      setNational(false);
      setWildAnimals(false);
      setFarm(false);
      setCats(false);
      setAcrylics(false);
      setMural(true);
    }

  }
  
  return (
    <div>
      <Header />
      <div className="button-wrapper">
        <p className="button-break">|</p>
        <button  className={national ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("national")}>National Exhibitions</button>
        <p className="button-break">|</p>
        <button className={dogs ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("dogs")}>Dogs</button>
        <p className="button-break">|</p>
        <button className={portrait ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("portrait")}>Portraits</button>
        <p className="button-break">|</p>
        <button className={wildAnimals ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("wild")}>Wild animals</button>
        <p className="button-break">|</p>
        <button className={horses ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("horses")}> Horses</button>
        <p className="button-break">|</p>
        <button className={farm ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("farm")}>Farm</button>
        <p className="button-break">|</p>
        <button className={cats ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("cats")}>Cats</button>
        <p className="button-break">|</p>
        <button className={acrylics ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("acrylics")}>Acrylics</button>
        <p className="button-break">|</p>
        <button className={mural ? 'gallery-button-active' : 'gallery-button'} onClick={() => handleClick("mural")}>Mural</button>
        <p className="button-break">|</p>
      </div>
      <div className="artwork-background">
      <div className="artwork-wrapper">
      {dogs === false ? (null) : (<Dogs/>)}  
      {portrait === false ? (null) : (<People/>)}
      {horses === false ? (null) : (<Horses/>)}
      {national === false ? (null) : (<National/>)}
      {wildAnimals === false ? (null) : (<Wild/>)}           
      {farm === false ? (null) : (<Farm/>)}
      {cats === false ? (null) : (<Cats/>)}
      {acrylics === false ? (null) : (<Acrylics/>)}        
      {mural === false ? (null) : (<Mural/>)}
      </div>
    </div>
    </div>
  );
}
